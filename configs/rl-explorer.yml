# Author: baichen318@gmail.com

# Constraint
# 1. fetchWidth >= decodeWidth
# 2. numIntPhysRegisters >= (32 + decodeWidth)
# 3. numFPPhysRegisters >= (32 + decodeWidth)
# 4. numRobEntries % decodeWidth == 0
# 5. numFetchBufferEntries % decodeWidth = 0
# 6. fetchWidth * 2 = icache.fetchBytes
# 7. decodeWidth == int_dispatchWidth
# 8. decodeWidth == int_issueWidth
# 9. decodeWidth == mem_dispatchWidth
# 10. decodeWidth == fp_dispatchWidth
# 11. numLdqEntries == numStqEntries
# 12. numFetchBufferEntries > fetchWidth

basic-component:
  icache:
    [
      # nSets nWays nTLBSets nTLBWays fetchBytes
      [64, 4, 1, 32, 8],
      [64, 8, 1, 32, 16],
      [64, 4, 2, 16, 8],
      [64, 8, 2, 16, 16],
      [32, 4, 1, 32, 8],
      [32, 8, 1, 32, 16],
      [32, 4, 2, 16, 8],
      [32, 8, 2, 16, 16]
    ]
  registers:
    [
      # numIntPhysRegisters numFpPhysRegisters
      [52, 48],
      [80, 64],
      [100, 96],
      [128, 128],
      [33, 33],
      [96, 64]
    ]
  issue-unit:
    [
      # IQT_INT IQT_MEM IQT_FP
      [8, 8, 8],
      [20, 12, 16],
      [32, 16, 24],
      [40, 24, 32],
      [32, 32, 32]
    ]
  dcache:
    [
      # nSets nWays nTLBSets nTLBWays nMSHRs
      [64, 4, 1, 8, 2],
      [64, 8, 1, 16, 4],
      [64, 8, 1, 32, 8],
      [32, 4, 1, 8, 2],
      [32, 8, 1, 16, 4],
      [32, 8, 1, 32, 8],
      [64, 4, 2, 8, 2],
      [64, 8, 2, 16, 4],
      [64, 8, 2, 32, 8]
    ]

# Design space
design-space:
  icache:
    start: 1
    end: 8
    stride: 1
  fetchWidth:
    candidates: [4, 8]
  numFetchBufferEntires:
    candidates: [8, 16, 24, 32, 40]
  numRasEntries:
    candidates: [16, 32]
  bpd:
    start: 1
    end: 4
    stride: 1
  ftq:
    candidates: [16, 32, 40]
  maxBrCount:
    candidates: [8, 12, 16, 20]
  decodeWidth:
    start: 1
    end: 5
    stride: 1
  numRobEntries:
    candidates: [32, 64, 96, 128, 130]
  registers:
    candidates: [1, 2, 3, 4, 5, 6]
  mem_issueWidth:
    candidates: [1, 2]
  fp_issueWidth:
    candidates: [1, 2]
  issueEntries:
    start: 1
    end: 5
    stride: 1
  mulUnroll:
    start: 1
    end: 2
    stride: 1
  lsuEntries:
    candidates: [8, 16, 24, 32]
  dcache:
    start: 1
    end: 9
    stride: 1
  dcacheReplacement:
    start: 1
    end: 3
    stride: 1

# benchmarks
benchmarks:
  - median
  - qsort
  - rsort
  - towers
  - vvadd
  - multiply
  - dhrystone
  - spmv
  - mt-vvadd
  - mt-matmul

# mode: generate-design | sim | generate-data | rl
mode: generate-design

# generate-design: batch x 5 designs
batch: 5

# generate-design: design-output-path
design-output-path: data/test/design.txt

# sim: idx
idx: 1

# generate-data: data-output-path
data-output-path: data/test/dataset.txt
