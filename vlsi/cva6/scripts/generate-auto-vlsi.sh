#!/bin/bash
# Author: baichen318@gmail.com

start=${start:-"1"}
end=${end:-"32"}
run_script=${run_script:-""}
file=${file:-""}

function set_env() {
    function handler() {
        exit 1
    }
    trap 'handler' SIGINT
}

function generate_auto_vlsi() {
    echo "[INFO]: generating compilation script: " ${file}
cat > ${file} << EOF
#!/bin/bash
# Author: baichen318@gmail.com
# post-syn. auto-vlsi
# Auto-generated by ${BASH_SOURCE[0]}

power="/research/dept8/gds/cbai/research/synopsys-flow/build/pt-pwr"
benchmarks=(median towers vvadd multiply)

function build2syn() {
    soc_name=\${1}
    echo "[INFO] build2syn \${soc_name}"
    (make sim-syn \
        MACROCOMPILER_MODE='-l /research/dept8/gds/cbai/research/chipyard/vlsi/hammer/src/hammer-vlsi/technology/asap7/sram-cache.json' \
        CONFIG=${soc_name} \
        BINARY=/research/dept8/gds/cbai/research/chipyard/toolchains/riscv-tools/riscv-tests/build/benchmarks/towers.riscv && \\
    sed -ie "s/endfunctions;/endfunction/g" /research/dept8/gds/cbai/research/chipyard/vlsi/generated-src/chipyard.TestHarness.${soc_name}/CVA6CoreBlackbox.preprocessed.sv && \\
    sed -i "s/\$fatal(1, \"Invalid value for parameter 'ARBITER'\!\");/\/\/\ \$fatal(1, \"Invalid value for parameter 'ARBITER'\!\");/g" generated-src/chipyard.TestHarness.${soc_name}/CVA6CoreBlackbox.preprocessed.sv && \\
    make sim-syn \
        MACROCOMPILER_MODE='-l /research/dept8/gds/cbai/research/chipyard/vlsi/hammer/src/hammer-vlsi/technology/asap7/sram-cache.json' \
        CONFIG=${soc_name} \
        BINARY=/research/dept8/gds/cbai/research/chipyard/toolchains/riscv-tools/riscv-tests/build/benchmarks/towers.riscv &)
}

function ptpx_impl() {
    soc_name=\${1}
    project_name=\${2}
    bmark=\${3}
    power_name=\${power}/\${soc_name}-power
    mkdir -p \${power_name}
    cd \${power}
    make build_pt_dir=\${power_name}/"build-pt-"\${bmark} \\
        cur_build_pt_dir=\${power_name}/"current-pt-"\${bmark} \\
        vcs_dir=/research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv \\
        icc_dir=/research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/syn-rundir/
    mv -f \${power_name}/build-pt-\${bmark} \${power_name}/\${bmark}
    rm -rf \${power_name}/current-pt-\${bmark}
    rm -f /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/*.saif
    rm -f /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/simv
    rm -rf /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/simv.daidir
    rm -f rm -f /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/ucli.key
    cd -
}

function sim2power() {
    soc_name=\${1}
    project_name=\${2}
    if [[ ! -d /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir ]] || \\
        [[ ! -e /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/syn-rundir/ChipTop.mapped.v ]]
    then
        build2syn \${soc_name}
        return 1
    fi
    # use self-built TestDriver.v
    cp -f TestDriver/TestDriver.v generated-src/chipyard.TestHarness.\${soc_name}
    if [[ -e /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv ]]
    then
        rm -rf /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv*
    fi
    # use self-built vcs.sh
    cp -f tools/vcs.sh vcs-\${soc_name}.sh
    sed -i "s/PATTERN/\${soc_name}/g" vcs-\${soc_name}.sh
    bash vcs-\${soc_name}.sh
    rm -rf vcs-\${soc_name}.sh
    # misc. operations
    if [[ -d csrc ]]
    then
        mv -f csrc /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir
        rm -rf csrc
    fi
    if [[ -e vc_hdrs.h ]]
    then
        mv -f vc_hdrs.h /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir
        rm -f vc_hdrs.h
    fi
    for bmark in \${benchmarks[@]}
    do
        if [[ -d /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv ]] && \\
            [[ ! -e \${power}/\${soc_name}-power/\${bmark}/reports/vcdplus.power.avg.max.report ]]
        then
            rm -rf /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv
        fi
    done
    # create run.tcl
    cp -f /research/dept8/gds/cbai/research/rl-explorer/vlsi/cva6/../../vlsi/cva6/scripts/run.tcl /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/
    sed -i "s/PATTERN/\${soc_name}/g" /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/run.tcl
    _bmark=()
    for bmark in \${benchmarks[@]}
    do
        if [[ -e \${power}/\${soc_name}-power/\${bmark}/reports/vcdplus.power.avg.max.report ]]
        then
            echo "[INFO]: Skip benchmark: \${bmark}."
            continue
        fi
        _bmark[\${#_bmark[*]}]=\${bmark}
        echo "[INFO]: benchmark: \${bmark}."
        mkdir -p /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv
        cp -rf /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv
        chmod +x /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv
        cp -rf /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv.daidir /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv
        (set -o pipefail && cd /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv && /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/simv \\
            +permissive \\
            +dramsim \\
            +dramsim_ini_dir=/research/dept8/gds/cbai/research/chipyard/generators/testchipip/src/main/resources/dramsim2_ini \\
            +max-cycles=700000  \\
            -ucli -do /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/run.tcl \\
            +ntb_random_seed_automatic \\
            +verbose \\
            +permissive-off \\
            /research/dept8/gds/cbai/research/chipyard/toolchains/riscv-tools/riscv-tests/build/benchmarks/\${bmark}.riscv </dev/null 2> \\
            >(spike-dasm > /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/\${bmark}.out) | tee /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/\${bmark}.log && cd - &)
    done

    pass_bmark=()
    all_done=0
    while [[ \${all_done} == 0 ]]
    do
        for bmark in \${_bmark[@]}
        do
            ret=\`grep "PASSED" /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/\${bmark}.out\`
            if [[ ! -z \${ret} ]] && [[ ! \${pass_bmark[@]} =~ \${bmark} ]]
            then
                while [[ -e /research/dept8/gds/cbai/research/chipyard/vlsi/build/\${project_name}/sim-syn-rundir/\${bmark}.riscv/vcdplus.saif ]]
                do
                    # waiting to generate saif
                    sleep 30
                    pass_bmark[\${#pass_bmark[*]}]=\${bmark}
                    ptpx_impl \${soc_name} \${project_name} \${bmark} &
                    break
                done
            fi
        done
        c=0
        for bmark in \${_bmark[@]}
        do
            if [[ ! \${pass_bmark[@]} =~ \${bmark} ]]
            then
                all_done=0
            else
                c=\`expr \${c} + 1\`
            fi
            if [[ \${c} == \${#_bmark[*]} ]]
            then
                all_done=1
            fi
        done
    done
}

count=\`expr ${end} - ${start} + 1\`
arr=\`seq ${start} ${end}\`
for idx in \${arr[@]}
do
    soc_name=CVA6\${idx}Config
    build2syn \${soc_name}
    sleep 1500
done

# sim2power
for idx in \${arr[@]}
do
    soc_name=CVA6\${idx}Config
    project_name=chipyard.TestHarness.\${soc_name}-ChipTop
    c=0
    for bmark in \${benchmarks[@]}
    do
        if [[ ! -e \${power}/\${soc_name}-power/\${bmark}/reports/vcdplus.power.avg.max.report ]]
        then
            break
        else
            c=\`expr \${c} + 1\`
        fi
    done
    if [[ \${c} == \${#benchmarks[*]} ]]
    then
        echo "[INFO]: Skip \${soc_name}"
        continue
    fi
    sim2power \${soc_name} \${project_name}
done
echo "[INFO]: Offline Auto-VLSI done."

EOF
}

while getopts "s:e:x:f:" arg
do
    case ${arg} in
        s)
            start=${OPTARG}
            ;;
        e)
            end=${OPTARG}
            ;;
        x)
            run_script=${OPTARG}
            ;;
        f)
            file=${OPTARG}
            ;;
        *)
            echo "[ERROR]: not implemented."
            exit
            ;;
    esac
done

set_env
generate_auto_vlsi
